// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5247.TestDrive;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc5247.TestDrive.subsystems.BackLifter;
import org.usfirst.frc5247.TestDrive.subsystems.FrontLifter;
import org.usfirst.frc5247.TestDrive.subsystems.SwaySubsystem;
import org.usfirst.frc5247.TestDrive.commands.DriveCommand;

import org.usfirst.frc5247.TestDrive.commands.LeftAuton;

import org.usfirst.frc5247.TestDrive.commands.TestAuton;
//import org.usfirst.frc5247.TestDrive.commands.TestAuton;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
//import org.usfirst.frc5247.TestDrive.commands.*;
import org.usfirst.frc5247.TestDrive.subsystems.*;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */

public class Robot extends IterativeRobot {
	
	
//Might not work for Auton... Just a trial.	
	//Command RightAuton; 
	
	

	Command autonomousCommand;
     SendableChooser<Command> autoChooser = new SendableChooser<>();
     //autoChooser.addDefault.TestAuton;
     
     //SendableChooser autoChooser;
    public static RobotMap robotMap; 
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveMotors driveMotors;
    public static SolenoidGroup0 solenoidGroup0;
    public static BackLifter backLifter;
    public static ClawHorizontal clawHorizontal;
    public static DriveSwitcher driveSwitcher;
    public static Elevator elevator;
    public static FrontLifter frontLifter;
    public static SwaySubsystem swaySubsystem;

    //public static FirstSubsystem firstSubsystem;
  //  public static PnumaticsSubsystem secondSubsystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    
  
    
    
    //public static AnalogInput GyroSet;
    public static AnalogInput sensor;
   //private int _SENSOR_PORT = 4;
   // private double _mvPerUnit = 4.88;
    //private double _mmPerUnit = 5.0;
    //private int L_MOTOR = 0;
    //private int R_MOTOR = 1;
 //   private static AnalogInput SecondSensor = RobotMap.scaleSensor;
    
    public void robotInit() {
 //public void RobotMap.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        robotMap = new RobotMap();
        driveMotors = new DriveMotors();
        solenoidGroup0 = new SolenoidGroup0();
        frontLifter = new FrontLifter();
        
        driveSwitcher = new DriveSwitcher();
        elevator = new Elevator();
        swaySubsystem = new SwaySubsystem();
        backLifter = new BackLifter();
                
        CameraServer.getInstance().startAutomaticCapture();
        CameraServer.getInstance().startAutomaticCapture();
    
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
      //  autoChooser = new SendableChooser();
        
        
       // autoChooser.addObject("Test Auton", new TestAuton());
       // autoChooser.addDefault("Right Auton", new RightAuton());
        //autoChooser.addDefault("Right Auton", new RightAuton());
        //autoChooser.addObject("Left Auton", new LeftAuton());
 
        autoChooser.addDefault("Right auton", new TestAuton());
       autoChooser.addObject("Teleop", new DriveCommand());
       
      //  SmartDashboard.putData("Right Auton", new RightAuton());
        SmartDashboard.putData("Left Auton", new LeftAuton());
        SmartDashboard.putData("Other Auton", new TestAuton());
       // 
        //autonomousCommand = (Command) autoChooser.getSelected();
        //while(limitSwitch.get()) {
        //	Timer.delay(10);
       // }
        
        
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        //SmartDashboard.putData("Auto mode", autoChooser);
    }


	/**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
       
    	autonomousCommand = new TestAuton();
    	if(autonomousCommand != null) 
    		autonomousCommand.start();
    	//if(LeftAuton != null)
    		//LeftAuton.start();
    	//if (autonomousCommand != null)
         //	autonomousCommand.start();
     }
    	


    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        //RightAuton.start();
        //LeftAuton.start();
        //autonomousCommand.start();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	
    	
    	if(autonomousCommand != null) {
    		autonomousCommand.cancel();
    	}
    	//if(LeftAuton != null)
    		//LeftAuton.cancel();
        //if (autonomousCommand != null) 
        	//autonomousCommand.cancel();
    
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        	
    }

	protected boolean isFinished() {
		// TODO Auto-generated method stub
		return false;
	}
}
